СПЕЦИФИКАЦИЯ LiME. Версия 0.dev (в разработке).

ЦЕЛЬ.

Сделать систему трансляции, которая давала бы программисту несколько
инструментов, которые, как показывает практика современного программирования,
востребованы и позволяют повысить производительность труда:

	- система типов с автоматическим выводом (возможно, в некоторой
	  ограниченной форме);

	- средства определения пользовательские конструкции для управления
	  потоком вычисления, создавать собственные реализации for/if/switch;

	- замыкания, как более гибкую в сравнении с ООП систему декомпозиции и
	  композиции кода;

	- специализацию кода во время исполнения, что, как известно (проект `C),
	  существенно повышает эффективность программ во время исполнения;

	- императивную семантику, которая предоставляет программисту большую
	  гибкость в построении различных систем событий;

	- модель исполнения ориентированную на процессы, а не на потоки;
	  процессы (в том числе и программно-изолированные) удобнее и
	  эффективнее в задачах управления ресурсами по сравнению с нитями, и не
	  уступают последним в эффективности при выполнении многозадачных
	  вычислений;

	- средства статического анализа кода и верификации;

	- оптимизирующий компилятор, позволяющий разрабатывать
	  высокопроизводительные приложения для супер-компьютеров.

В той или иной степени некоторые из этих инструментов реализованы в различных
системах программирования, однако все они не собраны ни в одной. Поэтому
возникает идея разработать подобную систему трансляции.

Побочным эффектом при её реализации должна стать возможность достаточно простой
организации frontend-ов некоторых традиционных языков программирования (C99,
Fortran, etc) поверх системы LiME. Определение базовых типов и конструкций для
описания потока управления на уровне пользователя должны свести задачу
построения таких frontend-ов к созданию:

	- кода, переводящего исходный текст программы в исходный текст на LiME,
	  возможно, в несколько оптимизированной форме, сходной с той, что сам
	  LiME (LiME is Metaprogramming Engine, поэтому сам) генерирует на этапе
	  лексического анализа;

	- реализаций тех или иных операторов, если они ещё не реализованы, в
	  рамках семантического движка LiME.

Примерно так.

СТРУКТУРА LiME.

Здесь описан текущий высокоуровневый взгляд на систему.

LiME состоит из двух компонент, каждая из которых внутри между своими
составными частями имеет обратные связи.

	- FE: входной фасад, который содержит лексическй анализатор и
	  семантический «движок»; в LiME синтаксический анализ примитивный,
	  основанный на операторной грамматике; однако порядок приоритетов
	  операторов может выбираться динамически, на основе разбора предыдущей
	  части исходного текста, поэтому синтаксический анализатор
	  рассматривается как часть семантического «движка» (SE);

	  лексический анализатор так же связан с SE: в зависимости от набранного
	  контекста может изменяться обработка некоторых лексем; на данный
	  момент это «.» в вещественных константах, которая может
	  интерпретироваться как лексема «.» даже если она встречается в таких,
	  например, последовательностях символов: 1.2, .3;

	  нужно для того, чтобы программист в LiME мог пользоваться
	  конструкциями вида:

	  	for(var (x.1; x.2) = range2d(0:N-1; 0:M-1))
		(
			sum += field(x.1; x.2)
		)

	- OPT: оптимизатор, получающий от FE представление программы в
	  промежуточном виде, в котором нет управляющих директив для
	  семантического движка; например, информации о взаимосвязи типов;
	  предполагается, что оптимизатор не нуждается в информации о том,
	  например, что некая структура данных была выведена из выражения

	  	array(20) list hash(string) int.2 
	  
	  вопрос, одако в том, какие знания о программе необходимы для успешной
	  оптимизации; достаточно ли знать только представление в виде потока
	  данных, из которого можно вывести всё остальное?

	  представляется, что оптимизатору не требуется обратная связь с
	  фасадом;

	- CG: генератор кода для целевой машины; должен получать от FE некоторое
	  описание программы, и генерировать по нему ассемблерный код.


